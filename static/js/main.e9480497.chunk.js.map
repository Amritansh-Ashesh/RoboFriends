{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/Scroll.js","components/SearchBox.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","toUpperCase","Cardlist","robots","map","user","i","components_Card","key","Scroll","props","style","overflowY","padding","children","SearchBox","searchfield","searchChange","onChange","type","placeholder","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","res","json","data","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_Cardlist","Component","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oIAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6GCDSC,EAdF,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,KAAKC,EAAeF,EAAfE,MAAMC,EAASH,EAATG,GACvB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gFACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,4BAAAC,OAA8BN,EAA9B,iBACnBO,IAAI,OACON,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQN,EAAKU,eAC3BP,EAAAC,EAAAC,cAAA,SAAIJ,MCYLU,EAnBE,SAAAZ,GAAgB,IAAba,EAAab,EAAba,OAEhB,OACIT,EAAAC,EAAAC,cAAA,WACMO,EAAOC,IAAI,SAACC,EAAKC,GACvB,OACAZ,EAAAC,EAAAC,cAACW,EAAD,CACQC,IAAKF,EACLb,GAAIU,EAAOG,GAAGb,GACdF,KAAMY,EAAOG,GAAGf,KAChBC,MAAOW,EAAOG,GAAGd,YCHlBiB,EARA,SAACC,GACZ,OACIhB,EAAAC,EAAAC,cAAA,OAAKe,MAAO,CAACC,UAAY,SAAUC,QAAS,cACvCH,EAAMI,WCSJC,EAZG,SAAAzB,GAAiCA,EAA/B0B,YAA+B,IAAlBC,EAAkB3B,EAAlB2B,aAE7B,OACIvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,SACIsB,SAAUD,EACVE,KAAK,SACLC,YAAY,wBC8CbC,cAhDP,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAgBRI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAhBtCX,EAAKY,MAAO,CACR/B,OAAQ,GACRa,YAAa,KAJPM,mFAQE,IAAAa,EAAAV,KAGhBW,MAAM,8CACDC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAEL,EAAKJ,SAAS,CAAC5B,OAAQqC,uCASnC,IAAAC,EAC8BhB,KAAKS,MAA5B/B,EADPsC,EACOtC,OAAQa,EADfyB,EACezB,YACT0B,EAAiBvC,EAAOwC,OAAO,SAAAC,GACrC,OAAOA,EAAMrD,KAAKsD,cAAcC,SAAS9B,EAAY6B,iBAIzD,OAAI1C,EAAO4C,OAMHrD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,gBACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAW/B,aAAcQ,KAAKI,iBAClCnC,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,CAAU/C,OAAQuC,MATnBhD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,sBA/BDsD,aCClBC,IAASC,OACT3D,EAAAC,EAAAC,cAAA,WACYF,EAAAC,EAAAC,cAAC0D,EAAD,OAEVC,SAASC,eAAe,SNsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.e9480497.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport '../index.css';\r\n\r\nconst Card = ({ name,email,id }) => {\r\n    return (\r\n        <div className=\"f6 tc bg-light-blue dib br3 pa3 ma2 grow bw1 shadow-5 b--solid b--dark-blue \">\r\n            <img src={`https://robohash.org/test${id}?size=200x200`}\r\n alt=\"ID\" />\r\n            <div>\r\n                <h3 className=\"name\">{name.toUpperCase()}</h3>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ robots }) => {\r\n    \r\n    return (\r\n        <div>\r\n            { robots.map((user,i) => {\r\n        return (\r\n        <Card \r\n                key={i} //Have to give a key in React for Exception Handling ?\r\n                id={robots[i].id} \r\n                name={robots[i].name}\r\n                email={robots[i].email}\r\n                />\r\n            );\r\n    })\r\n }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY : 'scroll', padding: '2rem 5rem'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\r\n    return(\r\n        <div className='sb tc f3 pa3'>\r\n            <input \r\n                onChange={searchChange}\r\n                type='search' \r\n                placeholder='Search for Robots' />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React , { Component } from 'react';\r\nimport Cardlist from '../components/Cardlist'\r\n// import {robots} from './robots';\r\nimport Scroll from '../components/Scroll'\r\nimport SearchBox from '../components/SearchBox';\r\n\r\nclass App extends Component {\r\n        constructor() {\r\n            super()\r\n            this.state ={\r\n                robots: [],\r\n                searchfield: ' '\r\n            }\r\n        }\r\n\r\n    componentDidMount() { \r\n\r\n        //FETCH API REQUEST\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => res.json())\r\n            .then(data=>this.setState({robots: data}))\r\n    \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n        // console.log(filteredRobots);\r\n    }\r\n\r\n    render(){\r\n            const {robots ,searchfield} = this.state;\r\n            const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n\r\n        //Ternary can be used :P this looks simpler \r\n        if(!robots.length){\r\n            return <h1 className='heading tc'>Loading ...</h1>\r\n        }\r\n\r\n        else{\r\n            return(\r\n                <div>\r\n                    <h2 className='heading tc'>SELECT ROBOT</h2> \r\n                    <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <Cardlist robots={filteredRobots}/>\r\n                </Scroll>\r\n                </div>\r\n                \r\n            );}\r\n        \r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport './index.css';\nimport App from './containers/App';\n\nReactDOM.render(\n<div>   \n            <App />\n</div>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}